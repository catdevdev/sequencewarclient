{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_MESSAGE, ON_MESSAGES } from '../actiontypes';\nconst initialState = {};\nexport const CReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        messages: action.payload\n      });\n\n    case ON_MESSAGES:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/redux/reducers/chat.js"],"names":["ADD_MESSAGE","ON_MESSAGES","initialState","CReducer","state","action","type","messages","payload"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,gBAAzC;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AACE,6CAAYI,KAAZ;AAAmBG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAApC;;AACF,SAAKP,WAAL;AACE,aAAOI,MAAM,CAACG,OAAd;;AAEF;AACE,aAAOJ,KAAP;AAPJ;AASD,CAVM","sourcesContent":["import { ADD_MESSAGE, ON_MESSAGES } from '../actiontypes';\n\nconst initialState = {};\n\nexport const CReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return { ...state, messages: action.payload };\n    case ON_MESSAGES:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}