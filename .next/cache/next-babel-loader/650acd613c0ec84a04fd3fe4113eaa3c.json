{"ast":null,"code":"var _jsxFileName = \"/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/components/UI/Window/Table/Row/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styled from 'styled-components';\nconst RowContainer = styled.div.withConfig({\n  displayName: \"Row__RowContainer\",\n  componentId: \"sc-19ztdgp-0\"\n})([\"width:100%;display:flex;justify-content:flex-start;\", \";\"], ({\n  lineEveryRow\n}) => lineEveryRow && 'border-top: 1px solid #fff');\nconst Cell = styled.div.withConfig({\n  displayName: \"Row__Cell\",\n  componentId: \"sc-19ztdgp-1\"\n})([\"width:\", \"%;height:100%;display:flex;justify-content:\", \";align-items:center;\"], ({\n  width\n}) => width, ({\n  center\n}) => center && 'center');\nconst Data = styled.div.withConfig({\n  displayName: \"Row__Data\",\n  componentId: \"sc-19ztdgp-2\"\n})([\"font-size:12px;font-weight:700;letter-spacing:2px;\"]);\nconst Button = styled.button.withConfig({\n  displayName: \"Row__Button\",\n  componentId: \"sc-19ztdgp-3\"\n})([\"display:inline-block;border:none;outline:none;border-radius:100px;width:77px;height:16px;background:rgba(255,255,255,0.2);cursor:pointer;text-transform:uppercase;font-size:12px;font-weight:700;letter-spacing:4px;color:#fff;\"]);\nconst Triangle = styled.div.withConfig({\n  displayName: \"Row__Triangle\",\n  componentId: \"sc-19ztdgp-4\"\n})([\"margin:10px 0;width:0;height:0;border-top:35px solid transparent;border-left:65px solid \", \";border-bottom:35px solid transparent;\"], ({\n  color\n}) => color);\n\nconst Row = ({\n  lineEveryRow,\n  primary,\n  dataPrimary,\n  widthCells,\n  rowData\n}) => {\n  return __jsx(React.Fragment, null, primary ? __jsx(React.Fragment, null, __jsx(RowContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, dataPrimary.map(({\n    data,\n    center\n  }, index) => {\n    if (data) return __jsx(Cell, {\n      key: index,\n      width: widthCells[index],\n      center: center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 19\n      }\n    }, __jsx(Data, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }, data));\n  }))) : __jsx(React.Fragment, null, __jsx(RowContainer, {\n    lineEveryRow: lineEveryRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, rowData.map(({\n    data,\n    button,\n    colorSpaceship,\n    center\n  }, index) => {\n    if (data && !button) return __jsx(Cell, {\n      key: index,\n      width: widthCells[index],\n      center: center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }, __jsx(Data, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, data));else if (button) {\n      return __jsx(Cell, {\n        key: index,\n        width: widthCells[index],\n        center: center,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 19\n        }\n      }, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, data));\n    } else if (colorSpaceship) {\n      return __jsx(Cell, {\n        key: index,\n        width: widthCells[index],\n        center: center,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }\n      }, __jsx(Triangle, {\n        color: colorSpaceship,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }));\n    }\n  }))));\n};\n\nexport default Row;","map":{"version":3,"sources":["/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/components/UI/Window/Table/Row/index.js"],"names":["styled","RowContainer","div","lineEveryRow","Cell","width","center","Data","Button","button","Triangle","color","Row","primary","dataPrimary","widthCells","rowData","map","data","index","colorSpaceship"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\n\nconst RowContainer = styled.div`\n  width: 100%;\n\n  /* height: ${({ primary }) => primary}; */\n\n  display: flex;\n  justify-content: flex-start;\n\n  ${({ lineEveryRow }) => lineEveryRow && 'border-top: 1px solid #fff'};\n`;\n\nconst Cell = styled.div`\n  width: ${({ width }) => width}%;\n  height: 100%;\n\n  display: flex;\n  justify-content: ${({ center }) => center && 'center'};\n  align-items: center;\n`;\n\nconst Data = styled.div`\n  font-size: 12px;\n\n  font-weight: 700;\n  letter-spacing: 2px;\n`;\n\nconst Button = styled.button`\n  display: inline-block;\n\n  border: none;\n  outline: none;\n\n  border-radius: 100px;\n\n  width: 77px;\n  height: 16px;\n  background: rgba(255, 255, 255, 0.2);\n  cursor: pointer;\n  text-transform: uppercase;\n\n  font-size: 12px;\n  font-weight: 700;\n  letter-spacing: 4px;\n  color: #fff;\n`;\n\nconst Triangle = styled.div`\n  margin: 10px 0;\n  width: 0;\n  height: 0;\n  border-top: 35px solid transparent;\n  border-left: 65px solid ${({ color }) => color};\n  border-bottom: 35px solid transparent;\n`;\n\nconst Row = ({ lineEveryRow, primary, dataPrimary, widthCells, rowData }) => {\n  return (\n    <>\n      {primary ? (\n        <>\n          <RowContainer>\n            {dataPrimary.map(({ data, center }, index) => {\n              if (data)\n                return (\n                  <Cell key={index} width={widthCells[index]} center={center}>\n                    <Data>{data}</Data>\n                  </Cell>\n                );\n            })}\n          </RowContainer>\n        </>\n      ) : (\n        <>\n          <RowContainer lineEveryRow={lineEveryRow}>\n            {rowData.map(({ data, button, colorSpaceship, center }, index) => {\n              if (data && !button)\n                return (\n                  <Cell key={index} width={widthCells[index]} center={center}>\n                    <Data>{data}</Data>\n                  </Cell>\n                );\n              else if (button) {\n                return (\n                  <Cell key={index} width={widthCells[index]} center={center}>\n                    <Button>{data}</Button>\n                  </Cell>\n                );\n              } else if (colorSpaceship) {\n                return (\n                  <Cell key={index} width={widthCells[index]} center={center}>\n                    <Triangle color={colorSpaceship} />\n                  </Cell>\n                );\n              }\n            })}\n          </RowContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}