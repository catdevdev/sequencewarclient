{"ast":null,"code":"var _jsxFileName = \"/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/components/UI/Window/Table/Row/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styled from 'styled-components';\nconst RowContainer = styled.div.withConfig({\n  displayName: \"Row__RowContainer\",\n  componentId: \"sc-19ztdgp-0\"\n})([\"width:100%;display:flex;justify-content:flex-start;\", \";\"], ({\n  lineEveryRow\n}) => lineEveryRow && 'border-top: 1px solid #fff');\nconst Cell = styled.div.withConfig({\n  displayName: \"Row__Cell\",\n  componentId: \"sc-19ztdgp-1\"\n})([\"width:\", \"%;height:100%;display:flex;justify-content:\", \";align-items:center;\"], ({\n  width\n}) => width, ({\n  center\n}) => center && 'center');\nconst Data = styled.div.withConfig({\n  displayName: \"Row__Data\",\n  componentId: \"sc-19ztdgp-2\"\n})([\"font-size:12px;font-weight:700;letter-spacing:2px;color:\", \";\"], ({\n  color\n}) => color ? color : '#fff');\nconst ColorBlock = styled.div.withConfig({\n  displayName: \"Row__ColorBlock\",\n  componentId: \"sc-19ztdgp-3\"\n})([\"width:100%;height:20px;background:\", \";\"], ({\n  color\n}) => color);\nconst Button = styled.button.withConfig({\n  displayName: \"Row__Button\",\n  componentId: \"sc-19ztdgp-4\"\n})([\"display:inline-block;border:none;outline:none;border-radius:100px;width:80px;height:16px;background:rgba(255,255,255,0.2);cursor:pointer;text-transform:uppercase;font-size:12px;font-weight:700;letter-spacing:4px;color:#fff;\"]);\nconst Triangle = styled.div.withConfig({\n  displayName: \"Row__Triangle\",\n  componentId: \"sc-19ztdgp-5\"\n})([\"margin:10px 0;width:0;height:0;border-top:35px solid transparent;border-left:65px solid \", \";border-bottom:35px solid transparent;\"], ({\n  color\n}) => color);\n\nconst Row = ({\n  lineEveryRow,\n  primary,\n  dataPrimary,\n  widthCells,\n  rowData\n}) => {\n  return __jsx(React.Fragment, null, primary ? __jsx(React.Fragment, null, __jsx(RowContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, dataPrimary.map(({\n    data,\n    center,\n    color\n  }, index) => {\n    if (data) return __jsx(Cell, {\n      key: index,\n      width: widthCells[index],\n      center: center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }, __jsx(Data, {\n      color: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, data));\n  }))) : __jsx(React.Fragment, null, __jsx(RowContainer, {\n    lineEveryRow: lineEveryRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, rowData.map(({\n    data,\n    button,\n    color,\n    colorBlock,\n    colorSpaceship,\n    center,\n    callback\n  }, index) => {\n    if (data && !button) return __jsx(Cell, {\n      key: index,\n      width: widthCells[index],\n      center: center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, __jsx(Data, {\n      color: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }\n    }, data));else if (colorBlock) {\n      return __jsx(Cell, {\n        key: index,\n        width: widthCells[index],\n        center: center,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, __jsx(ColorBlock, {\n        color: colorBlock,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 23\n        }\n      }));\n    } else if (button) {\n      return __jsx(Cell, {\n        key: index,\n        width: widthCells[index],\n        center: center,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }\n      }, __jsx(Button, {\n        onClick: callback && callback,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 23\n        }\n      }, data));\n    } else if (colorSpaceship) {\n      return __jsx(Cell, {\n        key: index,\n        width: widthCells[index],\n        center: center,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }, __jsx(Triangle, {\n        color: colorSpaceship,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 23\n        }\n      }));\n    }\n  }))));\n};\n\nexport default Row;","map":{"version":3,"sources":["/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/components/UI/Window/Table/Row/index.js"],"names":["styled","RowContainer","div","lineEveryRow","Cell","width","center","Data","color","ColorBlock","Button","button","Triangle","Row","primary","dataPrimary","widthCells","rowData","map","data","index","colorBlock","colorSpaceship","callback"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\n\nconst RowContainer = styled.div`\n  width: 100%;\n\n  /* height: ${({ primary }) => primary}; */\n\n  display: flex;\n  justify-content: flex-start;\n\n  ${({ lineEveryRow }) => lineEveryRow && 'border-top: 1px solid #fff'};\n`;\n\nconst Cell = styled.div`\n  width: ${({ width }) => width}%;\n  height: 100%;\n\n  display: flex;\n  justify-content: ${({ center }) => center && 'center'};\n  align-items: center;\n`;\n\nconst Data = styled.div`\n  font-size: 12px;\n  font-weight: 700;\n  letter-spacing: 2px;\n\n  color: ${({ color }) => (color ? color : '#fff')};\n`;\n\nconst ColorBlock = styled.div`\n  width: 100%;\n  height: 20px;\n  background: ${({ color }) => color};\n  \n`;\n\nconst Button = styled.button`\n  display: inline-block;\n\n  border: none;\n  outline: none;\n\n  border-radius: 100px;\n\n  width: 80px;\n  height: 16px;\n  background: rgba(255, 255, 255, 0.2);\n  cursor: pointer;\n  text-transform: uppercase;\n\n  font-size: 12px;\n  font-weight: 700;\n  letter-spacing: 4px;\n  color: #fff;\n`;\n\nconst Triangle = styled.div`\n  margin: 10px 0;\n  width: 0;\n  height: 0;\n  border-top: 35px solid transparent;\n  border-left: 65px solid ${({ color }) => color};\n  border-bottom: 35px solid transparent;\n`;\n\nconst Row = ({ lineEveryRow, primary, dataPrimary, widthCells, rowData }) => {\n  return (\n    <>\n      {primary ? (\n        <>\n          <RowContainer>\n            {dataPrimary.map(({ data, center, color }, index) => {\n              if (data)\n                return (\n                  <Cell key={index} width={widthCells[index]} center={center}>\n                    <Data color={color}>{data}</Data>\n                  </Cell>\n                );\n            })}\n          </RowContainer>\n        </>\n      ) : (\n        <>\n          <RowContainer lineEveryRow={lineEveryRow}>\n            {rowData.map(\n              (\n                {\n                  data,\n                  button,\n                  color,\n                  colorBlock,\n                  colorSpaceship,\n                  center,\n                  callback,\n                },\n                index\n              ) => {\n                if (data && !button)\n                  return (\n                    <Cell key={index} width={widthCells[index]} center={center}>\n                      <Data color={color}>{data}</Data>\n                    </Cell>\n                  );\n                else if (colorBlock) {\n                  return (\n                    <Cell key={index} width={widthCells[index]} center={center}>\n                      <ColorBlock color={colorBlock} />\n                    </Cell>\n                  );\n                } else if (button) {\n                  return (\n                    <Cell key={index} width={widthCells[index]} center={center}>\n                      <Button onClick={callback && callback}>{data}</Button>\n                    </Cell>\n                  );\n                } else if (colorSpaceship) {\n                  return (\n                    <Cell key={index} width={widthCells[index]} center={center}>\n                      <Triangle color={colorSpaceship} />\n                    </Cell>\n                  );\n                }\n              }\n            )}\n          </RowContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}