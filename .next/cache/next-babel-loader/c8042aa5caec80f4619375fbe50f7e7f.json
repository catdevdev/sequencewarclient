{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EMIT_USER, ON_USER } from '../actiontypes';\nconst initialState = {};\nexport const userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ON_USER:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/redux/reducers/user.js"],"names":["EMIT_USER","ON_USER","initialState","userReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,gBAAnC;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,OAAL;AACE,6CAAYG,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPM","sourcesContent":["import { EMIT_USER, ON_USER } from '../actiontypes'\n\nconst initialState = {}\n\nexport const userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ON_USER:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}