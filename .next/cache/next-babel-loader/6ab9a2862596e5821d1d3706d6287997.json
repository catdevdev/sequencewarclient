{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ON_ROOMS } from '../actiontypes';\nvar initialState = {\n  rooms: null\n};\nexport var roomsReducer = function roomsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ON_ROOMS:\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/redux/reducers/rooms.js"],"names":["ON_ROOMS","initialState","rooms","roomsReducer","state","action","type"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,QAAL;AACE,+BAAYI,KAAZ;;AACF;AACE,aAAOA,KAAP;AAJJ;AAMD,CAPM","sourcesContent":["import { ON_ROOMS } from '../actiontypes';\n\nconst initialState = {\n  rooms: null\n};\n\nexport const roomsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ON_ROOMS:\n      return { ...state }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}