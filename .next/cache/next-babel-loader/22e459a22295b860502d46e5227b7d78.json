{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_MESSAGE, ON_MESSAGES } from '../actiontypes';\nconst initialState = {\n  messages: [],\n  showMobileChat: false\n};\nexport const chatReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        messages: [...state.messages, action.payload]\n      });\n\n    case ON_MESSAGES:\n      return action.payload;\n\n    case SHOW_MOBILE_CHAT_MODAL:\n      return _objectSpread({}, state);\n\n    case HIDE_MOBILE_CHAT_MODAL:\n      return F;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/vlad/Desktop/projects/UnityProjects/sequencewarclient/redux/reducers/chat.js"],"names":["ADD_MESSAGE","ON_MESSAGES","initialState","messages","showMobileChat","chatReducer","state","action","type","payload","SHOW_MOBILE_CHAT_MODAL","HIDE_MOBILE_CHAT_MODAL","F"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,gBAAzC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAArB;AAKA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,6CAAYM,KAAZ;AAAmBH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,OAA3B;AAA7B;;AACF,SAAKR,WAAL;AACE,aAAOM,MAAM,CAACE,OAAd;;AACF,SAAKC,sBAAL;AACE,+BAAYJ,KAAZ;;AACF,SAAKK,sBAAL;AACE,aAAOC,CAAP;;AACF;AACE,aAAON,KAAP;AAVJ;AAYD,CAbM","sourcesContent":["import { ADD_MESSAGE, ON_MESSAGES } from '../actiontypes';\n\nconst initialState = {\n  messages: [],\n  showMobileChat: false,\n};\n\nexport const chatReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return { ...state, messages: [...state.messages, action.payload] };\n    case ON_MESSAGES:\n      return action.payload;\n    case SHOW_MOBILE_CHAT_MODAL:\n      return { ...state };\n    case HIDE_MOBILE_CHAT_MODAL:\n      return F;\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}